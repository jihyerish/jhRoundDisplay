<pre class='metadata'>
Title: CSS Round Display Level 1
TR: https://www.w3.org/TR/css-round-display-1/
Shortname: css-round-display
Group: csswg
Level: 1
Status: ED
Work Status: Exploring
ED: https://drafts.csswg.org/css-round-display/
Previous Version: https://www.w3.org/TR/2015/WD-css-round-display-1-20150922/
Editor: Hyojin Song, LG Electronics, hyojin22.song@lge.com
Editor: Jihye Hong, LG Electronics, jh.hong@lge.com
Former Editor: Soonbo Han, LG Electronics, soonbo.han@lge.com
Abstract: This document describes CSS extensions to support a round display. The extensions help web authors to build a web page suitable for a round display.
</pre>

<h2 id="introduction">Introduction</h2>
<p>
Conventionally, web pages have been shown through a rectangular screen such as PC, tablet, and smart phone. The window content area in a web browser is a rectangle. Each HTML element follows the W3C box model and thus is also a rectangle.
<br>
Nowadays, devices come in varied shapes of the displays.
It needs to consider the shape of the display when implementing web pages on devices.
However, current web standards lack some features to support the devices as follows:
<ol>
    <li>Lack of the capability to detect the shape of a display</li>
    <li>Lack of layout mechanisms suitable for the shape of a display</li>
</ol>
In order to facilitate the use of the web especially on a round display, there could be some features to support it.
</p>
<p>
The 'device-radius' media feature is added to Media Queries.
Current user agents are not capable of detecting the shape of a display so that authors cannot apply various layouts for a round display. To resolve the issue, 'device-radius' informs the web page of the property regarding the shape of the display.
<br><br>
To apply the shape of a display to content area, we extend the 'shape-inside' property of CSS Shapes. The position of the element which is overflowed from the display is adjusted inside the display when using this property even if the authors don’t know the exact shape of the display.
<br><br>
We also add the 'border-boundary' property to CSS Borders. The borders of the element can be drawn along the edge of the display even if the element is overflowed.
<br><br>
For the better web design suitable for a round display, we introduce polar positioning.
In conventional positioning method, the Cartesian coordinates, elements are positioned by offsets in x-axis and y-axis. But, we suggest a method to position elements with specifying the distance and angle from the origin point of coordinates.

This module provides features such as:

	* 	Detecting the rounded display
	* 	Aligning contents in the display’s shape
	* 	Drawing borders along the display’s edge
	* 	Positioning elements in polar coordinates

</p>


<h2 id="terminology">Terminology</h2>
This specification follows the CSS property definition conventions from [[!CSS21]]. <br />
The detailed description of Media Queries is defined in [[MEDIAQUERIES-4]]<br />
The detailed description of CSS Shapes is defined in [[CSS-SHAPES-1]]<br />
The detailed description of Borders is defined in [[CSS3-BORDER]]<br />
The detailed description of Positioned Layout is defined in [[CSS3-POSITIONING]]<br />


<h2 id="extending-media-queries">Extending Media Queries for a round display</h2>
<p>
 Media Queries [[MEDIAQUERIES-4]] define mechanisms to support media-dependent style sheets, tailored for different environments. We propose to extend Media Queries by adding the 'device-radius' media feature to support a round display. This will allow web authors to apply different styles to a web page on the rounded display.
</p>
<section>
<h3 id="device-radius-media-feature">The 'device-radius' media feature</h3>
To use different style sheets for a rectangle display and for a round display, media queries should support some properties to identify the display shape. The 'device-radius' media feature describes the property of rounded borders of a display.
<div class='example'>
This media query indicates that different style sheets will be applied depending on the display shape.
<pre>
&lt;link media="screen and (device-radius: 0%)" rel="stylesheet" href="rectangle.css" />
&lt;link media="screen and (device-radius: 50%)" rel="stylesheet" href="round.css" />
</pre>
<p>
By the mechanism of media queries, if the value of the 'device-radius' media feature is less than 50%, '<code>rectangle.css</code>' is applied. If it is 50%, '<code>round.css</code>' is applied.
</p>
</div>
<p>As in the '<code>border-radius</code>' property, the 'device-radius' media feature can describe various round shapes of displays, such as rectangle, regular circle, ellipse, and rectangle with round corners.
</p>
<pre class='descdef mq'>
	Name: device-radius
	Type: range
    For: @media
	Value: [ <<length>> | <<percentage>> ]
	Percentage: Refer to corresponding dimension of the display
</pre>
<p class="note">
Note: To define a '<code>range</code>' type media feature, the feature may be written as a normal media feature, but with a '<code>min-</code>' or '<code>max-</code>' prefix on the feature name. '<code>min-</code>' or '<code>max-</code>' prefixes express 'greater or equal to' or 'smaller or equal to' constraints respectively.
</p>
<p>
The length or percentage value of the '<code>device-radius</code>' property defines a radius of a quarter ellipse in terms of the shape of the corner of the outer screen edge (This is similar to the '<code>border-radius</code>' property. See the 'border-radius' description). If the length is zero, the shape of screen is a rectangle, otherwise it is a rectangle with rounded corners or a circle or an ellipse. A percentage value of the '<code>device-radius</code>' is proportional to a width and a height of the screen, which have relevance to a horizontal radius and a vertical radius of the screen according to the length of width and height of the screen each. If the screen shape is the regular circle, '<code>device-radius</code>': 50% has a true value since a half of the width(=height) of the regular circle is the radius of the screen shape. In case of an ellipse with 200x100, '<code>device-radius</code>': 50% means that horizontal-radius of the screen is 100px and vertical-radius of the screen is 50px. It can't be described in length, not percentage. A negative value is not allowed.
</p>

<div class='example'>
The example below shows how a web page looks in the different shapes of displays. This is a simple clock written in HTML. (without 'device-radius')
<pre>&lt;!DOCTYPE html>

&lt;html>
&lt;head>
    &lt;link rel="stylesheet" href="rectangle.css" />
&lt;/head>
&lt;body>
    &lt;div id="clockLayer">
        &lt;div id="clockLayer">
            &lt;div id="date">2015/02/28 (SAT)&lt;/div>
            &lt;div id="time">10:11&lt;/div>
            &lt;div id="weather">&lt;img src="cloudy.png" />&lt;/div>
        &lt;/div>
    &lt;/div>
&lt;/body>
&lt;/html>
</pre>

<div style="width: 700px; height: 380px; text-align:center">
    <div style="float: left; width: 350px;">
        <img alt="An image of a rectangle clock within a rectangle display" src="images/device_radius_clock_a.png">
        <p>(A) Rectangle Display</p>
    </div>
    <div style="float: left; ">
        <img alt="An image of a round clock within a rectangle display" src="images/device_radius_clock_b.png">
        <p>(B) Round Display</p>
    </div>
</div>
<div style="width: 700px">
    <p class="caption">Devices where the 'device-radius' media feature is not applicable</p>
</div>
On the other hand, the example below shows how the 'device-radius' media feature works in the different shapes of displays. This is the same as the code above except for media queries usage. The 'device-radius' media feature can be used as follows:
<pre>&lt;!-- index.html -->

&lt;head>
    &lt;link media="screen and (device-radius: 0%)" rel="stylesheet" href="rectangle.css" />
    &lt;link media="screen and (device-radius: 50%)" rel="stylesheet" href="round.css" />
&lt;/head>
</pre>
If this example code is loaded in a regular round display, '<code>round.css</code>' will be applied by the media queries mechanism. To render the clock properly, '<code>round.css</code>' could be written as follows.
<pre>
#clockLayer {
    border-radius: 50%;
}
#clockInset {
    border-radius: 50%;
}
#date {
    text-align: center;
}
...
</pre>
<div style="width: 700px; height: 380px; text-align:center">
    <div style="float: left; width: 350px;">
        <img alt="An image of a rectangle clock within a rectangle display" src="images/device_radius_clock_a.png">
        <p>(A) Rectangle Display<br>(w/ <code>device-radius: 0%</code>)</p>
    </div>
    <div style="float: left; ">
        <img alt="An image of a round clock within a round display" src="images/device_radius_clock_c.png">
        <p>(B) Round Display<br>(w/ <code>device-radius: 50%</code>)</p>
    </div>
</div>
<div style="width: 700px">
    <p class="caption">Devices where the 'device-radius' media feature is applicable</p>
</div>
</div>
<p class="note">Note: For other shapes, such as polygons, we need to extend the media features with additional parameters. The current features have limitations to support the diversity beyond round shapes. How can we express star-shaped polygons? (e.g. SVG syntax, etc.) Of course, there is a trade-off between simplicity and expressiveness.
</p>
<p class="issue">
The current 'device-radius' media feature was derived from the syntax of 'border-radius' to specify various shapes, but its usage is a little complicated with several issues. For simplicity and obviousness, 'device-radius' would be changed with the revised syntax. (e.g. Am I round or rounded corners?)
</p>

<h2 id="extending-viewport-rule">Extending the @viewport rule</h2>
<h3 id="viewport-fit-descriptor">The 'viewport-fit' descriptor</h3>
<p>
'viewport-fit' can set the size of the bounding box for the viewport which is the viewing area used to apply the initial viewport. And we can see the actual viewport through the bounding box.
</p>
<pre class=descdef>
	Name: viewport-fit
    For: @viewport
    Value: auto | contain | cover
    Initial: auto
 	Percentages: N/A
    Media: visual, continuous
    Computed value: as specified
</pre>
<p>
When setting the size of the bounding box for the viewport on non-rectangular display, we have to consider the factors like below:
  - Clipped area which is caused because the area of the viewport bounding box is larger than the area of the display
  - Gap between the bounding box for the viewport and the border of the display

 </p> 

<div style="text-align: center">
	<div style="display: inline-block; width: 300px;">
	    <img alt="An image of the clipped area between the viewport bounding box and the device's border" style="width: 250px" src="images/viewport_clipped_area.png">
	    <p>(A) Clipped area</p>
	</div>
	<div style="display: inline-block; width: 300px;">
	    <img alt="An image of the gap between the viewport bounding box and the device's border" style="width: 250px" src="images/viewport_gap.png">
	    <p>(B) Gap</p>
	</div>
</div>

<p>
The author can decide which factor is more important than another. If it have to be guaranteed that any part of the web page isn't hidden, avoiding clipping is more important than having a gap between the bounding box of the viewport and the border of the screen.

Values have the following meanings:

<dl dfn-type=value dfn-for=viewport-fit>
    <dt><dfn>contain</dfn></dt>
    <dd>
        The bounding box of the viewport is the largest rectangle which is inscribed in the display of the device.
        When the actual viewport applied to the bounding box as inscribed rectangle, 'border-boundary: display' and 'shape-inside: display' have no effect.
    </dd>

    <dt><dfn>cover</dfn></dt>
    <dd>
        The bounding box of the viewport is the circumscribed rectangle of the display of the device.
    </dd>

    <dt><dfn>auto</dfn></dt>
    <dd>
        The UA chooses the size of the bounding box for the viewport between 'contain' and 'cover'. 'auto' is the same as 'contain' when the shape of the display is rectangle or round. And when the shape of the display is the other shapes such as rounded rectangle or star-shape, it works like 'cover'.
    </dd>
</dl>
</p>

<div class='example'>

	This example shows the size of the bounding box for the viewport specified with 'viewport-fit'.
	
	When the 'viewport-fit' is specified with 'contain', the actual viewport is applied to the largest inscribed rectangle of the display.

	<pre>
	@viewport (viewport-fit: contain) {
	    /* CSS for the rectangular design */
	}	   
	</pre>

	<div style="width: 600px; text-align: center">
		<img src="images/viewport_fit_contain.png" alt="An image about the viewport applied to the bounding box specified with 'viewport-fit: contain'" style="width: 300px; text-align: center"/>
		<p class="caption">With '<code>viewport-fit: contain</code>'</p>
	</div>
	<br>

	When 'cover' is given to the 'viewport-fit', the actual viewport is applied to the circumscribed rectangle of the display.

	<pre>
	@viewport (viewport-fit: cover) {
	    /* CSS for the rectangular design */
	}
	</pre>

	<div style="width: 600px; text-align: center">
		<img src="images/viewport_fit_cover.png" alt="An image about the viewport applied to the bounding box specified with 'viewport-fit: cover'" style="width: 300px; text-align: center"/>
		<p class="caption">With '<code>viewport-fit: cover</code>'</p>
	</div>
</div>

<h2 id="aligning-content">Aligning content along the display border</h2>
<h3 id="shape-inside-property">The 'shape-inside' property</h3>
<p>
CSS Shapes [[CSS-SHAPES-1]] define the 'shape-inside' property that aligns contents along the edge of a possibly non-rectangular wrapping area. Web authors may use this feature to fit contents inside a round display. However, it can be challenging to specify the wrapping area to be identical to the shape of a display. To address such cases, 'shape-inside' is extended with a new value named '<code>display</code>', such an element having this value will have its content (or contained elements) aligned along the display border automatically.
</p>
<pre class='link-defaults'>
spec:css21; type:type; text:<uri>
</pre>
<pre class='propdef'>
    Name: shape-inside
    Applies to: block-level elements
    Value: auto | outside-shape | [ <<basic-shape>> || shape-box ] | <<image>> | <code>display</code>
    Initial: auto
    Inherited: no
    Media: visual
    Computed value: computed lengths for <<basic-shape>>, the absolute URI for <<uri>>, otherwise as specified
    Animatable: as specified for <<basic-shape>>, otherwise no
</pre>
<p>
The example below shows how the 'shape-inside' property works when it is set to '<code>display</code>'. Without using Media Queries, contents can be aligned within the display edge automatically.
</p>
<div class='example'>
<pre>&lt;style>

    #container {
        shape-inside: display;
        // the same as circle(50% at 50%, 50%) in a regular round display
    }
    #green-box { float: left; }
    #blue-box { float: right; }
&lt;/style>
&lt;div id="container">
    &lt;p>
        Some inline content
        &lt;img id="green-box" src="green-box.jpg" />
        with a float left and float right, in a
        &lt;img id="blue-box" src="blue-box.jpg" />
        simple box with a circle shape-inside.
    &lt;/p>
&lt;/div>
</pre>
<br />
<div style="width: 500px; height: 380px; text-align:center">
    <div style="float: left; width: 230px;">
        <img alt="A layout of web contents without shape-inside:display" style="width: 230px" src="images/shape_inside_watch_a.png">
        <p>(A) Without '<code>shape-inside</code>'</p>
    </div>
    <div style="float: left; width: 230px;">
        <img alt="A layout of web contents with shape-inside: display" style="width: 230px" src="images/shape_inside_watch_b.png">
        <p>(B) With '<code>shape-inside: display</code>'</p>
    </div>
</div>
<div style="width: 500px">
    <p class="caption">Align the content along the display border</p>
</div>
</div>
<p>
This property is specially useful for complex shapes (e.g. curved, stelliform, polygonal), that wouldn't be covered by <<basic-shape>> (i.e. circle() or ellipse()), allowing web authors to conveniently align contents with the display edge.
</p>
<p>
When a containing block is placed on one end of the display and the containing block has 'shape-inside: display', the descendant blocks of the containing block are basically put on the overlapping region between the containing block and the display area. The overlapping region's shape is mostly complicated shape, so it's difficult to define the shape using previous method like basic-shape. The figure 4 describes these circumstances as follows.
</p>
<div style="width: 500px;">
    <img alt="An image of two examples to show the principle of shape-inside: display" style="width: 500px" src="images/shape_inside_a.png">
    <p class="caption">Align part of the content along the display border</p>
</div>
<p class="issue">
What if content overflows? Clipping or scrolling?
</p>

<h2 id="drawing-borders">Drawing borders around the display border</h2>
<h3 id="border-boundary-property">The 'border-boundary' property</h3>
<p>
We add the 'border-boundary' property to set a boundary constraint that affects the borders of an element.
</p>
<pre class='propdef'>
    Name: border-boundary
    Applies to: all elements
    Value: none | parent | display
    Initial: none
    Inherited: yes
    Media: visual
</pre>
<p>
When the 'border-boundary' property on an element is set to '<code>parent</code>', additional borders of the element could be drawn where the element's area and the borders of its parent are met. When it is set to '<code>display</code>', additional borders could be drawn where the element's area and the borders of screen are met. The default value is '<code>none</code>', imposing no boundary constraint on the borders.
</p>
<div class='example'>
The example below shows how the 'border-boundary' property works on drawing borders. The result is shown in Figure 5B.
<pre>&lt;style>

    #container {
        border-boundary: display;
    }
    #redBox {
        border: 5px red solid;
    }
    #greenBox {
        border: 5px green solid;
    }
    #blueBox {
        border: 5px blue solid;
    }
&lt;/style>
&lt;div id="container">
    &lt;div id="redBox">&lt;/div>
    &lt;div id="greenBox">&lt;/div>
    &lt;div id="blueBox">&lt;/div>
&lt;/div>
</pre>
<br />
<div style="width: 600px; text-align:center">
    <div style="float: left; width: 300px;">
        <img alt="An image of circle drawing border lines without border-boundary: display" style="width: 200px" src="images/border_boundary_a.png">
        <p>(A) Without '<code>border-boundary</code>'</p>
    </div>
    <div style="float: left; width: 300px;">
        <img alt="An image of circle drawing border lines with border-boundary: display" style="width: 200px" src="images/border_boundary_b.png">
        <p>(B) With '<code>border-boundary: display</code>'</p>
    </div>
</div>
<div style="width: 600px">
    <p class="caption">Align the content along the display border</p>
</div>
</div>

<p class="note">Note: If the value of 'border-boundary' is parent or display, border lines of the element are actually just a visual effect. It triggers a layout for rendering in a general way, but in the above cases (border-boundary: parent|display), the layout doesn't occur and it only draws the border lines inward from the containing block's borders. With this situation, the borders might hide contents around the display edge.
</p>

<h2 id="positioning-content">Content positioning using polar coordinate system</h2>

<p>
Polar coordinate system is a two-dimensional coordinate system that describes the position of a point in a plane with a distance from a reference point and an angle from a reference direction. Elements could be placed along a circle or concentric circles, and the polar coordinate system is useful to handle such cases.

This section introduces polar positioning to support layout of elements in the polar coordinate system where the position of an element is determined by a distance from the center point within the containing element and an angle from the Y-axis.

The conventional coordinates used in web is the Cartesian coordinate system. So when 'auto' is given to 'polar-origin', it follows the conventional way. But setting another value than 'auto' to 'polar-origin' enables positioning an element in the polar coordinate system. The 'polar-angle' and 'polar-distance' properties specify the angular value and distance of an element from the origin in polar coordinates.

</p>

<div class='example'>
This example shows a way to align elements within the polar coordinate system.
<pre>&lt;body>

  &lt;div id="circle1" style="position: absolute; polar-origin: center; polar-angle: 0deg; polar-distance: 50%">&lt;/div>
  &lt;div id="circle2" style="position: absolute; polar-origin: center; polar-angle: 90deg; polar-distance: 20%">&lt;/div>
  &lt;div id="circle3" style="position: absolute; polar-origin: center; polar-angle: 225deg; polar-distance: 100%">&lt;/div>
&lt;/body>
</pre>
<div style="width: 400px; text-align: center">
	<img alt="An image of three elements positioned to polar coordinates" src="images/polar_a.png" style="width: 200px; border: 1px #AAA solid; text-align: center"/>
	<p class="caption">An example of polar positioning</p>
</div>
</div>

<p>
In conventional coordinate system used for positioning an element in a containing block, the offset of the element is applied depending on the edges of the element’s containing block.

In comparison, the default origin of polar coordinates is positioned at the center point of a containing block. The position for the origin point can be set by 'polar-origin'.
</p>

<h3 id="polar-angle-property">The 'polar-angle' property</h3>
The 'polar-angle' property specifies the angle from the Y-axis.
<pre class='propdef'>
    Name: polar-angle
    Applies to: all elements
    Value: <<angle>>
    Initial: 0
    Media: visual
    Inherited: no
    Percentages: N/A
	Animatable: as <a href="https://www.w3.org/TR/css3-transitions/#animatable-types">angle</a>
</pre>

<p class="note">
Note: In polar coordinate system, a pole is the reference point and points are described as been a certain distance from it, as also a certain angle from the polar axis. In mathematical theory, the polar axis is commonly defined as the positive direction of the x-axis, but we consider the polar axis as the positive direction of the y-axis position as other CSS specifications usually do. Therefore, when the 'polar-angle'  value  of an element is 0, the element is positioned on the y-axis. If the angle value of an element increases in the positive direction from 0, the element moves clockwise. The method to determine a direction using 'polar-angle' works the same way in [[css-values-3]], <<angle>> value.
</p>


<h3 id="polar-distance-property">The 'polar-distance' property</h3>
The 'polar-distance' property determines how far elements are positioned from the origin of polar coordinates.
<pre class='propdef'>
    Name: polar-distance
    Applies to: all elements
    Value: [ <<length>> | <<percentage>> <<size>>? ] && contain?
    Initial: 0
    Media: visual
    Inherited: no
    Percentages: relative to distance from the origin of polar coordinates to edge of containing block
    Animatable: as <a href="https://www.w3.org/TR/css3-transitions/#animtype-lpcalc">length, percentage, or calc</a>
</pre>
<p>
The 'polar-distance' specifies the distance between the origin of polar coordinates and the anchor point of the element.
<br><br>
Values have the following meanings:
<dl>
<dt><var>&lt;length&gt;</var></dt>
<dd>
Gives a fixed length between the origin of polar coordinates and the anchor point of element.
</dd>
</dl>

<dl>
<dt><var>&lt;percentage&gt;</var></dt>
<dd>
Is relative to the distance between the origin of polar coordinates and the point of contact which is made by the edge of containing block and the gradient-line from the origin of polar coordinates. The value of the gradient of the line is polar angle value.
</dd>
</dl>

<dl>
<dt><var>&lt;size&gt;</var></dt>
<dd>
Decides a point used for measuring the distance from the origin point.


It is defined as

&nbsp;<b>&lt;size&gt;</b> = [ closest-side | closest-corner | farthest-side | farthest-corner ]

If omitted it defaults to <var>closest-side</var>.
When the <b>&lt;size&gt;</b> is used with <b>&lt;percentage&gt;</b>, the calculated value of 'polar-distance' is constant regardless of the value of 'polar-angle'.

<dl>
<dt><var>closest-side</var></dt>
<dd>
The distance is measured between the origin and the closest side of the box from it.
</dd>
<dt><var>closest-corner</var></dt>
<dd>
The distance is measured between the origin and the closest corner of the box from it.
</dd>
<dt><var>farthest-side</var></dt>
<dd>
The distance is measured between the origin and the farthest side of the box from it.
</dd>
<dt><var>farthest-corner</var></dt>
<dd>
The distance is measured between the origin and the farthest corner of the box from it.
</dd>
</dl>
<p class='note'>
Note: When the origin of polar coordinates is at one of the corners of the containing block, the closest side takes the edge which meets with the origin. Even if the offset given by <<length>> or <<percentage>> changes, the position of the element specified with 'closest-side' is the same.
</p>
</dd>
</dl>

<dl>
<dt><var>contain</var></dt>
<dd>
Adjust 'polar-distance' value of the positioned element which overflows shape of the containing block.
The main purpose of this value is avoiding overflow when positioning elements.
When overflowing occurs, the distance between the point of origin of polar coordinates and the anchor point of the element is reduced,
until there are 2 contact points or less between edge of shape of containing block and content block of the element.
</dd>
</dl>
</p>

<div class='example'>
When elements are defined like below,

<pre>
	&lt;div style="position: absolute; width: 40px; height: 30px;">
		&lt;div id = “circle1” style="position: absolute; width: 4px; height: 4px;">&lt;/div>
		&lt;div id = “circle2” style="position: absolute; width: 4px; height: 4px;">&lt;/div>
	&lt;/div>
</pre>

<p>
Specifying different &lt;size&gt; value for the same &lt;percentage&gt; value makes a difference in the positions of the elements.
</p>

The style below is for the (A),
<pre>&lt;style>

	#circle1 {
		polar-origin: 10px 15px;
		polar-angle: 0deg;
		polar-distance: 100% closest-side;
	}
	#circle2 {
		polar-origin: 10px 15px;
		polar-angle: 90deg;
		polar-distance: 100% closest-side;
	}
&lt;/style>
</pre>

And the next definition is for the (B)
<pre>&lt;style>

	#circle1 {
		polar-origin: 10px 15px;
		polar-angle: 0deg;
		polar-distance: 100% closest-corner;
	}
	#circle2 {
		polar-origin: 10px 15px;
		polar-angle: 90deg;
		polar-distance: 100% closest-corner;
	}
&lt;/style>
</pre>

<br />
<div style="width: 700px; text-align:center">
    <div style="float: left; width: 350px;">
		<img alt="An example of polar-distance with closest-side"
			style="width: 300px" src="images/polar_distance_percentage_a.png">
		<p>(A) With <code>closest-side</code></p>
	</div>
    <div style="float: left; width: 350px; ">
		<img alt="An example of polar-distance with closest-corner"
			style="width: 300px" src="images/polar_distance_percentage_b.png">
		<p>(B) With <code>closest-corner</code></p>
	</div>
</div>
<div style="width: 700px">
    <p class="caption">Using &lt;size> with &lt;percentage> for polar-distance</p>
</div>

</div>

<div class='example'>
Here are some examples.
The first example shows positioning elements with polar-distance not using extent keyword value. Some parts of elements are outside the boundary of the containing block's shape:

<pre>&lt;body>

  &lt;div style="position: absolute; polar-angle: 45deg; polar-distance: 100%">&lt;/div>
  &lt;div style="position: absolute; polar-angle: 180deg; polar-distance: 100%">&lt;/div>
&lt;/body>
</pre>
<div style="width: 500px; text-align: center">
	<img src="images/polar_distance_a.png" alt="An image about elements positioned by polar-distance without contain" style="width: 350px;"/>
</div>

In the second example, 'contain', the extent keyword value is added to the polar-distance value of each element to avoid overflowing.

<pre>&lt;body>

  &lt;div style="position: absolute; polar-angle: 45deg; polar-distance: 100% contain">&lt;/div>
  &lt;div style="position: absolute; polar-angle: 180deg; polar-distance: 100% contain">&lt;/div>
&lt;/body>
</pre>
<div style="width: 500px; text-align: center">
	<img src="images/polar_distance_b.png" alt="An image about elements positioned by polar-distance with contain" style="width: 350px;"/>
</div>
</div>

<h3 id="polar-origin-property">The 'polar-origin' property</h3>
<p>
The 'polar-origin' property establishes the point of origin for coordinate system. It sets the horizontal and vertical representative point at which the offset values of the element is applied.
<br>

</p>
<pre class='propdef'>
    Name: polar-origin
    Applies to: all elements
    Value: auto | <<position>>
    Initial: auto
    Media: visual
    Inherited: no
    Percentages: Refer to the size of containing block
	Animatable: as <a href="https://www.w3.org/TR/css3-transitions/#animtype-lpcalc">length, percentage, or calc</a>
</pre>
<p>
	Values are defined as follows:
	
	<dl>
	<dt><var>auto</var></dt>
	<dd>
	Computes to 'top left' if 'polar-origin' as the box model layout in Cartesian coordinates.
	<br>
	In polar coordinates, there are many use cases specifying the position of the origin at the center point of the containing block. Therefore an element is positioned to the horizontally and vertically center in the area of the containing block when auto value is given to the 'polar-origin'.
	But if it is used in conventional coordinate system, the origin of coordinate system is at the upper left corner of the containing block by default. For example, 'top' and 'left' are used for positioning the element, auto value makes the same result of giving 'top left' as the value of 'polar-origin'.
	</dd>
	</dl>
	
	<dl>
	<dt><<position>></dt>
	<dd>
	Values of <<position>> are defined like below:
		<dl>
		<dt><var>&lt;percentage&gt;</var></dt>
		<dd>
		A percentage for the horizontal offset is relative to the width of the containing block. A percentage for the vertical offset is relative to height of the containing block.
		</dd>
		</dl>

		<dl>
		<dt><var>&lt;length&gt;</var></dt>
		<dd>
		A length value gives a fixed length as the offset. The value for the horizontal and vertical offset represent an offset from the top left corner of the containing block.
		</dd>
		</dl>

		<dl>
		<dt><var>top</var></dt>
		<dd>
		Computes to 0% for the vertical position.
		</dd>
		</dl>

		<dl>
		<dt><var>right</var></dt>
		<dd>
		Computes to 100% for the horizontal position.
		</dd>
		</dl>

		<dl>
		<dt><var>bottom</var></dt>
		<dd>
		Computes to 100% for the vertical position.
		</dd>
		</dl>

		<dl>
		<dt><var>left</var></dt>
		<dd>
		Computes to 0% for the horizontal position.
		</dd>
		</dl>

		<dl>
		<dt><var>center</var></dt>
		<dd>
		Computes to 50% (left 50%) for the horizontal position if the horizontal position is not otherwise specified, or 50% (top 50%) for the vertical position if it is.
		</dd>
		</dl>
	</dd>
	</dl>
</p>

<div class='example'>
This example shows how auto value of polar-origin is calculated differently depending on which coordinate system elements are positioned in.

<pre>
	#item1 {
		polar-origin: center;
		polar-distance: 10px;
		polar-angle: 90deg;
	}
</pre>
<div style="width: 600px; text-align: center">
	<img src="images/polar_origin_a.png" alt="An image about interpreting auto of polar-origin in polar coordinates" style="width: 300px; text-align: center"/>
	<p class="caption">"polar-origin: center" makes possible to position an element with polar positioning</p>
</div>
<br>
<pre>
	#item2 {
		polar-origin: auto;
		left: 10px;
	}
</pre>
<div style="width: 600px; text-align: center">
	<img src="images/polar_origin_b.png" alt="An image about interpreting auto of polar-origin in Cartesian coordinates" style="width: 350px; text-align: center"/>
	<p class="caption">"polar-origin: auto" is the same result with "polar-origin: top left"</p>
</div>

</div>

<p class="issue">
As it’s available to specify the point of origin for polar coordinates, properties such as 'margin', 'padding' would work different from the conventional coordinate system. We need different approaches to define those properties which are related to layout.
</p>

<p class="issue">
When 'polar-origin' is not <code>auto</code>, it needs to be decided whether 'top', 'right', 'bottom', and 'left' properties are ignored or interpreted somehow.
</p>


<h3 id="polar-anchor-property">The 'polar-anchor' property</h3>
<p>
The 'polar-anchor' property sets an anchor point of the element. The anchor point specifies a position which is a representative point of the element. The anchor point could be set as any point within a content area of the element rather than being positioned to the upper left corner of the element by CSS box model.

The value of 'polar-distance' is the distance between an anchor point and the origin point of coordinates.
</p>
<pre class='propdef'>
    Name: polar-anchor
    Applies to: all elements
    Value: <<position>>
    Initial: 50% 50%
    Media: visual
    Inherited: no
    Percentages: relative to width and height of an element
	Animatable: as <<position>>
</pre>
<p>
Meanings of some keywords in <<position>> are different from those used in 'polar-origin' property.

<dl>
<dt><var>&lt;percentage&gt;</var></dt>
<dd>
A percentage for the horizontal offset is relative to width of content box area of the element. A percentage for the vertical offset is relative to height of content box area of the element. For example, with a value pair of '100%, 0%', an anchor point is on the upper right corner of the element.
</dd>
</dl>

<dl>
<dt><var>&lt;length&gt;</var></dt>
<dd>
A length value gives a length offset from the upper left corner of the element's content area.
</dd>
</dl>
</p>

<p>
Only with 'polar-angle' and 'polar-distance' to position elements, adjusting values of those properties for avoiding elements sticking out of the containing block is required. When the appropriate anchor point is given, there is no need to adjust 'polar-distance' value to avoid overflowing when positioning elements in the containing block.
</p>

<div class='example'>
This example shows an alignment of four elements with different anchor points positioned in a containing block.

<pre>&lt;style>

	#item1 {
		position: absolute;
		polar-angle: 45deg;
		polar-distance: 100%;
		polar-anchor: right top;
	}
	#item2 {
		position: absolute;
		polar-angle: 135deg;
		polar-distance: 100%;
		polar-anchor: right bottom;
	}
	#item3 {
		position: absolute;
		polar-angle: 225deg;
		polar-distance: 100%;
		polar-anchor: left bottom;
	}
	#item4 {
		position: absolute;
		polar-angle: 315deg;
		polar-distance: 100%;
		polar-anchor: left top;
	}
&lt;/style>
&lt;body>
	&lt;div id="item1">&lt;/div>
	&lt;div id="item2">&lt;/div>
	&lt;div id="item3">&lt;/div>
	&lt;div id="item4">&lt;/div>
&lt;/body>
</pre>
<div style="width: 400px; text-align: center">
	<img alt="An image of four elements with different anchor points positioned in a containing block" src="images/polar_anchor.png" style="width: 300px; text-align: center"/>
	<p class="caption">An example of 'polar-anchor'</p>
</div>
</div>
<p class="issue">
Is '<code>auto</code>' needed for value of 'polar-anchor'?
</p>

<p class="issue">
The alternative naming without the polar- prefix for 'polar-origin' and 'polar-anchor' is needed. When it becomes to use polar positioning regardless of the value of the position property, 'polar-origin' and 'polar-anchor' would be used independently from polar positioning.
</p>

<p class="issue">
How can the margin be applied to an element when <code>polar-origin: 50% 50%</code> and <code>polar-anchor: 50% 50%</code>?
<br>
Which would be a base point for applying it between the upper left corner or center of a containing block?
With the former, the position of the element changes when the value of the margin changes, while with the latter, the margin value doesn't affect the position of the element.
</p>

<p class="issue">
Can 'polar-anchor' be replaced by 'margin-top' and 'margin-left'?
<br>
There are several differences between 'polar-anchor' and 'margin-left' & 'margin-top'.<br>
In case of 'margin-left' & 'margin-top', percentages resolve to the width of the element itself.
but in case of 'polar-anchor', percentage resolves to the width and height of a containing block of the element.
</p>

<h3 id="2d-rotation-transform-function">2D Rotation Transform Function for self-rotating elements in polar coordinates</h3>
<p>
 When elements are positioned in polar coordinates, there are many usecases which show the elements rotated toward the origin of polar coordinates. In such cases, degree of rotation has to be specified in the 2d rotation function for each element. But when using the keyword value instead of the <<angle>> value, the calculation of accurate rotation degree may be omitted.
<br><br>

<p>
The two-dimensional rotation function <code><a href="https://www.w3.org/TR/css3-transforms/#funcdef-rotate">'rotate(&lt;angle>)'</a></code> used in polar coordinates is extended as follows:
</p>
<dfn>
	<a href="https://www.w3.org/TR/css3-transforms/#funcdef-rotate">rotate()</a>
	= rotate( <<angle>> | polar-angle | polar-angle-reverse)
</dfn>


Values have the following meanings:
<dl>
	<dt><var>polar-angle</var></dt>
	<dd>
	Computes to the value of 'polar-angle' property.
	</dd>
</dl>

<dl>
	<dt><var>polar-angle-reverse</var></dt>
	<dd>
	Computes to the value of the 'polar-angle' property plus 180 degrees.
	</dd>
</dl>
</p>

<p class="note">
Note: polar-angle and polar-angle-reverse keywords resolve to angle values when determining the computed value of transform property.

It makes possible to define an animation such as transforming between rotate(0deg) and rotate(polar-angle).
If there is an animation using 'polar-angle' property, polar-angle value and polar-angle-reverse value track the changes in the value of the 'polar-angle' property.
</p>
<div class='example'>
This example shows how the keyword value works in the 2d rotation function.

<pre>&lt;style>

	#item1 {
		position: absolute;
		polar-angle: 0deg;
		polar-distance: 90%;
		transform: rotate(polar-angle);
	}
	#item2 {
		position: absolute;
		polar-angle: 45deg;
		polar-distance: 90%;
		transform: rotate(polar-angle);
	}
	#item3 {
		position: absolute;
		polar-angle: 135deg;
		polar-distance: 90%;
		transform: rotate(polar-angle-reverse);
	}
	#item4 {
		position: absolute;
		polar-angle: 180deg;
		polar-distance: 90%;
		transform: rotate(polar-angle-reverse);
	}
	#item5 {
		position: absolute;
		polar-angle: 225deg;
		polar-distance: 90%;
		transform: rotate(polar-angle-reverse);
	}
	#item6 {
		position: absolute;
		polar-angle: -45deg;
		polar-distance: 90%;
		transform: rotate(polar-angle);
	}
&lt;/style>
&lt;body>
	&lt;div id="item1">1&lt;/div>
	&lt;div id="item2">2&lt;/div>
	&lt;div id="item3">3&lt;/div>
	&lt;div id="item4">4&lt;/div>
	&lt;div id="item5">5&lt;/div>
	&lt;div id="item6">6&lt;/div>
&lt;/body>
</pre>
<div style="width: 500px; text-align: center">
	<img alt="An image of extended 2d rotate function" src="images/2d_rotate_function.png" style="width: 250px; text-align: center"/>
	<p class="caption">An example of the extension for 2d rotate function</p>
</div>
</div>

<h2 id="usecases">
Use Cases</h2>

	Use cases are described on
	<a href="https://wiki.csswg.org/ideas/round-display">these</a>.

<h2 id="changes">
Changes</h2>

<h3 id="changes_from_Sep_22_2015">
Changes from <a href="https://www.w3.org/TR/2015/WD-css-round-display-1-20150922/">September 22<sup>th</sup> 2015</a> version</h3>

	<ul>
		<li>Added 'polar-anchor'</li>
		<li>Added 'contain' for 'polar-distance' for avoiding the overflow issue.</li>
		<li>Added 'polar-origin'</li>
		<li>Added extension for 2d rotation function for polar coordinates</li>
		<li>Changed naming of keyword values for 2d rotation function</li>
		<li>Removed <code>polar</code> value of 'position'. Polar positioning applies to absolute/fixed/sticky/relative positioned elements</li>
		<li>Added auto value to 'polar-origin' and make it as initial value</li>
		<li>Added &lt;size> keywords to 'polar-distance'</li>
		<li>Added the Acknowledgements, Use cases, and Changes</li>
	</ul>

<h2 class="no-num" id="acks">
Acknowledgements</h2>
<p>
	This specification is made possible by input from Dong-Young Lee, Soonbo Han,
	Florian Rivoal, Joone Hur,
	Kang-Soo Seo, Sangjo Park, Woojun Jung, Chisoon Jeong, Yunbum Sung,
	Alan Stearns, Brad Kemper, and the CSS Working Group members.
	Thanks also to Adenilson Cavalcanti for editorial input.</p>
